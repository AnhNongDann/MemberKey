# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'giaodien.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QWidget,QPushButton, QHBoxLayout, QVBoxLayout
from PyQt5.QtWidgets import QLineEdit, QMessageBox, QFileDialog
from PyQt5.QtWidgets import QTableWidget,QTableWidgetItem, QHeaderView
from pathlib import Path

import random

first_primes_list = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29,
                     31, 37, 41, 43, 47, 53, 59, 61, 67,
                     71, 73, 79, 83, 89, 97, 101, 103,
                     107, 109, 113, 127, 131, 137, 139,
                     149, 151, 157, 163, 167, 173, 179,
                     181, 191, 193, 197, 199, 211, 223,
                     227, 229, 233, 239, 241, 251, 257,
                     263, 269, 271, 277, 281, 283, 293,
                     307, 311, 313, 317, 331, 337, 347, 349]


class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(1042, 566)
        self.E_label = QtWidgets.QLabel(Dialog)
        self.E_label.setGeometry(QtCore.QRect(20, 10, 47, 13))
        self.E_label.setObjectName("E_label")
        self.tildeE_label = QtWidgets.QLabel(Dialog)
        self.tildeE_label.setGeometry(QtCore.QRect(20, 160, 47, 13))
        self.tildeE_label.setObjectName("tildeE_label")
        self.tildeZ_label = QtWidgets.QLabel(Dialog)
        self.tildeZ_label.setGeometry(QtCore.QRect(20, 310, 47, 13))
        self.tildeZ_label.setObjectName("tildeZ_label")
        self.folder_label = QtWidgets.QLabel(Dialog)
        self.folder_label.setGeometry(QtCore.QRect(20, 460, 47, 13))
        self.folder_label.setObjectName("folder_label")
        self.E = QtWidgets.QTextEdit(Dialog)
        self.E.setGeometry(QtCore.QRect(80, 10, 901, 131))
        self.E.setObjectName("E")
        self.E.setEnabled(False)
        self.tildeE = QtWidgets.QTextEdit(Dialog)
        self.tildeE.setGeometry(QtCore.QRect(80, 160, 901, 131))
        self.tildeE.setObjectName("tildeE")
        self.tildeE.setEnabled(False)
        self.tildeZ = QtWidgets.QTextEdit(Dialog)
        self.tildeZ.setGeometry(QtCore.QRect(80, 310, 901, 131))
        self.tildeZ.setObjectName("tildeZ")
        self.tildeZ.setEnabled(False)
        self.folder = QtWidgets.QLabel(Dialog)
        self.folder.setGeometry(QtCore.QRect(70, 460, 191, 21))
        self.folder.setObjectName("folder")
        self.folder_button = QtWidgets.QPushButton(Dialog)
        self.folder_button.setGeometry(QtCore.QRect(310, 460, 91, 23))
        self.folder_button.setObjectName("folder_button")
        self.refresh_button = QtWidgets.QPushButton(Dialog)
        self.refresh_button.setGeometry(QtCore.QRect(680, 500, 91, 41))
        self.refresh_button.setObjectName("refresh_button")
        self.save_button = QtWidgets.QPushButton(Dialog)
        self.save_button.setGeometry(QtCore.QRect(820, 500, 91, 41))
        self.save_button.setObjectName("save_button")

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)


        #event
        self.folder_button.clicked.connect(self.click_change_file)
        self.refresh_button.clicked.connect(self.click_refresh)
        self.save_button.clicked.connect(self.click_save)

    def click_change_file(self):
        file , check = QFileDialog.getOpenFileName(None, "QFileDialog.getOpenFileName()",
                                               "", "Public key (*.csv)")
        if check:
            self.folder.setText(file)
            (e,tempe,tempz)=self.GenerateKey()
            self.E.setText(e)
            self.tildeE.setText(tempe)
            self.tildeZ.setText(tempz)
            self.refresh_button.setEnabled(True)
            self.save_button.setEnabled(True)
    
    def click_refresh(self):
        (e,tempe,tempz)=self.GenerateKey()
        self.E.setText(e)
        self.tildeE.setText(tempe)
        self.tildeZ.setText(tempz)
        self.refresh_button.setEnabled(True)
        self.save_button.setEnabled(True)
        
    def click_save(self):
        p = Path(self.folder.text())
        fileFolderName= str(p.parent)+"\\"
        file = open(fileFolderName + "PublicMemberKey.csv", "w")
        file.writelines("tildeE,"+self.tildeE.toPlainText() + "\n")
        file.writelines("tildeZ,"+self.tildeZ.toPlainText() + "\n")
        file.close()

        file = open(fileFolderName + "PrivateMemberKey.csv", "w")
        file.writelines("tildeE,"+self.E.toPlainText()+ "\n")
        file.close()

    def retranslateUi(self, Dialog):

        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.E_label.setText(_translate("Dialog", "E"))
        self.tildeE_label.setText(_translate("Dialog", "tilde_E"))
        self.tildeZ_label.setText(_translate("Dialog", "tilde_Z"))
        self.folder_label.setText(_translate("Dialog", "Public key"))
        self.E.setText(_translate("Dialog", ""))
        self.tildeE.setText(_translate("Dialog", ""))
        self.tildeZ.setText(_translate("Dialog", ""))
        self.folder.setText(_translate("Dialog", ""))
        self.folder_button.setText(_translate("Dialog", "Choose file"))
        self.refresh_button.setText(_translate("Dialog", "Refresh"))
        self.save_button.setText(_translate("Dialog", "Save"))
        self.refresh_button.setEnabled(False)
        self.save_button.setEnabled(False)

    def GetPublicKey(self):
        try:
            filePath = self.folder.text()
            f = open(filePath, "r")
            lines = f.readlines()
            N = lines[0].split("\\")[0].split(",")[1]
            Z = lines[3].split("\\")[0].split(",")[1]
            L = lines[4].split("\\")[0].split(",")[1]
            L1 = lines[5].split("\\")[0].split(",")[1]
            L2 = lines[6].split("\\")[0].split(",")[1]
            return (int(N),int(Z),int(L),int(L1),int(L2))
        except:
            msg = QMessageBox()
            msg.setWindowTitle("Notify")
            msg.setText("Load public key file fail!")

            x = msg.exec_()
            return (0,0,0,0,0)

    def GenerateKey(self):
        (N,Z,L,L1,L2) = self.GetPublicKey()
        if (N!=0):
            hatE = GetPrime(lower(L), upper(L))
            e = GetPrime(2 ** L1 + 1, 2 ** L1 + 2 ** L2 - 1)
            tempE = hatE * e
            tempZ = pow(Z, hatE, N)
            return (str(e),str(tempE), str(tempZ))
        else:
            return ("","","")


def nBitRandom(a,b):
    return random.randrange(a,b)

def getLowLevelPrime(a,b):
    while True:
        pc = nBitRandom(a,b)
        for divisor in first_primes_list:
            if pc % divisor == 0 and divisor ** 2 <= pc:
                break
        else:
            return pc

def isMillerRabinPassed(mrc):
    maxDivisionsByTwo = 0
    ec = mrc - 1
    while ec % 2 == 0:
        ec >>= 1
        maxDivisionsByTwo += 1
    assert (2 ** maxDivisionsByTwo * ec == mrc - 1)

    def trialComposite(round_tester):
        if pow(round_tester, ec, mrc) == 1:
            return False
        for i in range(maxDivisionsByTwo):
            if pow(round_tester, 2 ** i * ec, mrc) == mrc - 1:
                return False
        return True

    numberOfRabinTrials = 20
    for i in range(numberOfRabinTrials):
        round_tester = random.randrange(2, mrc)
        if trialComposite(round_tester):
            return False
    return True

def GetPrime(a,b):
    while True:
        prime_candidate = getLowLevelPrime(a,b)
        if not isMillerRabinPassed(prime_candidate):
            continue
        else:
            return prime_candidate


def lower(n):
    return 2**(n-1)+1

def upper(n):
    return 2**n-1
